// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/30/2018 17:42:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm_nome
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_nome_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg Entrada;
// wires                                               
wire bit0ea;
wire bit1ea;
wire y0;
wire y1;
wire y2;
wire y3;
wire y4;
wire y5;
wire y6;
wire y7;

// assign statements (if any)                          
fsm_nome i1 (
// port map - connection between master ports and signals/registers   
	.bit0ea(bit0ea),
	.bit1ea(bit1ea),
	.clear(clear),
	.clk(clk),
	.Entrada(Entrada),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7)
);
initial 
begin 
#1000000 $finish;
end 

// clear
initial
begin
	clear = 1'b0;
	clear = #20000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// Entrada
initial
begin
	Entrada = 1'b0;
	Entrada = #80000 1'b1;
	Entrada = #40000 1'b0;
end 
endmodule

